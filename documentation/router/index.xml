<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gin router on Gin Web Framework</title>
    <link>https://gin-gonic.com/documentation/router/</link>
    <description>Recent content in Gin router on Gin Web Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Sep 2018 16:57:20 +0200</lastBuildDate>
    
	<atom:link href="https://gin-gonic.com/documentation/router/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using HTTP methods</title>
      <link>https://gin-gonic.com/documentation/router/requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/requests/</guid>
      <description>Using GET, POST, PUT, PATCH, DELETE and OPTIONS
func main() { // Disable Console Color // gin.DisableConsoleColor() // Creates a gin router with default middleware: // logger and recovery (crash-free) middleware router := gin.Default() router.GET(&amp;quot;/someGet&amp;quot;, getting) router.POST(&amp;quot;/somePost&amp;quot;, posting) router.PUT(&amp;quot;/somePut&amp;quot;, putting) router.DELETE(&amp;quot;/someDelete&amp;quot;, deleting) router.PATCH(&amp;quot;/somePatch&amp;quot;, patching) router.HEAD(&amp;quot;/someHead&amp;quot;, head) router.OPTIONS(&amp;quot;/someOptions&amp;quot;, options) // By default it serves on :8080 unless a // PORT environment variable was defined. router.Run() // router.Run(&amp;quot;:3000&amp;quot;) for a hard coded port }  </description>
    </item>
    
    <item>
      <title>Grouping routes</title>
      <link>https://gin-gonic.com/documentation/router/grouping_routes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/grouping_routes/</guid>
      <description>If your routes have a common prefix you can group them like
func main() { router := gin.Default() // Simple group: v1 v1 := router.Group(&amp;quot;/v1&amp;quot;) { v1.POST(&amp;quot;/login&amp;quot;, loginEndpoint) v1.POST(&amp;quot;/submit&amp;quot;, submitEndpoint) v1.POST(&amp;quot;/read&amp;quot;, readEndpoint) } // Simple group: v2 v2 := router.Group(&amp;quot;/v2&amp;quot;) { v2.POST(&amp;quot;/login&amp;quot;, loginEndpoint) v2.POST(&amp;quot;/submit&amp;quot;, submitEndpoint) v2.POST(&amp;quot;/read&amp;quot;, readEndpoint) } router.Run(&amp;quot;:8080&amp;quot;) }  </description>
    </item>
    
    <item>
      <title>Parameters in path</title>
      <link>https://gin-gonic.com/documentation/router/parameters_path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/parameters_path/</guid>
      <description>Here is an example that shows how to use path parameters
func main() { router := gin.Default() // This handler will match /user/john but will not match /user/ or /user router.GET(&amp;quot;/user/:name&amp;quot;, func(c *gin.Context) { name := c.Param(&amp;quot;name&amp;quot;) c.String(http.StatusOK, &amp;quot;Hello %s&amp;quot;, name) }) // However, this one will match /user/john/ and also /user/john/send // If no other routers match /user/john, it will redirect to /user/john/ router.GET(&amp;quot;/user/:name/*action&amp;quot;, func(c *gin.Context) { name := c.</description>
    </item>
    
    <item>
      <title>Query parameters</title>
      <link>https://gin-gonic.com/documentation/router/query_params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/query_params/</guid>
      <description>In order to access the query parameters you can use DefaultQuery and Query methods from *gin.Context
func main() { router := gin.Default() // Query string parameters are parsed using the existing underlying request object. // The request responds to a url matching: /welcome?firstname=Jane&amp;amp;lastname=Doe router.GET(&amp;quot;/welcome&amp;quot;, func(c *gin.Context) { firstname := c.DefaultQuery(&amp;quot;firstname&amp;quot;, &amp;quot;Guest&amp;quot;) lastname := c.Query(&amp;quot;lastname&amp;quot;) // shortcut for c.Request.URL.Query().Get(&amp;quot;lastname&amp;quot;) c.String(http.StatusOK, &amp;quot;Hello %s %s&amp;quot;, firstname, lastname) }) router.Run(&amp;quot;:8080&amp;quot;) }  </description>
    </item>
    
    <item>
      <title>Form parameters</title>
      <link>https://gin-gonic.com/documentation/router/multipart_form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/multipart_form/</guid>
      <description>The multipart/urlencoded form parameters can be accessed with the DefaultPostForm and PostForm methods
func main() { router := gin.Default() router.POST(&amp;quot;/form_post&amp;quot;, func(c *gin.Context) { message := c.PostForm(&amp;quot;message&amp;quot;) nick := c.DefaultPostForm(&amp;quot;nick&amp;quot;, &amp;quot;anonymous&amp;quot;) c.JSON(200, gin.H{ &amp;quot;status&amp;quot;: &amp;quot;posted&amp;quot;, &amp;quot;message&amp;quot;: message, &amp;quot;nick&amp;quot;: nick, }) }) router.Run(&amp;quot;:8080&amp;quot;) }  </description>
    </item>
    
    <item>
      <title>Query &#43; form params</title>
      <link>https://gin-gonic.com/documentation/router/query_form/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/query_form/</guid>
      <description>Having this server
func main() { router := gin.Default() router.POST(&amp;quot;/post&amp;quot;, func(c *gin.Context) { id := c.Query(&amp;quot;id&amp;quot;) page := c.DefaultQuery(&amp;quot;page&amp;quot;, &amp;quot;0&amp;quot;) name := c.PostForm(&amp;quot;name&amp;quot;) message := c.PostForm(&amp;quot;message&amp;quot;) fmt.Printf(&amp;quot;id: %s; page: %s; name: %s; message: %s&amp;quot;, id, page, name, message) }) router.Run(&amp;quot;:8080&amp;quot;) }  and making a request
POST /post?id=1234&amp;amp;page=1 HTTP/1.1 Content-Type: application/x-www-form-urlencoded name=manu&amp;amp;message=this_is_great  the variables in our handler will be
id: 1234; page: 1; name: manu; message: this_is_great  </description>
    </item>
    
    <item>
      <title>Maps in query or post</title>
      <link>https://gin-gonic.com/documentation/router/query_post_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/query_post_map/</guid>
      <description>The server
func main() { router := gin.Default() router.POST(&amp;quot;/post&amp;quot;, func(c *gin.Context) { ids := c.QueryMap(&amp;quot;ids&amp;quot;) names := c.PostFormMap(&amp;quot;names&amp;quot;) fmt.Printf(&amp;quot;ids: %v; names: %v&amp;quot;, ids, names) }) router.Run(&amp;quot;:8080&amp;quot;) }  the request
POST /post?ids[a]=1234&amp;amp;ids[b]=hello HTTP/1.1 Content-Type: application/x-www-form-urlencoded names[first]=thinkerou&amp;amp;names[second]=tianou  values
ids: map[b:hello a:1234], names: map[second:tianou first:thinkerou]  </description>
    </item>
    
    <item>
      <title>Uploading files</title>
      <link>https://gin-gonic.com/documentation/router/uploading_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/uploading_files/</guid>
      <description>Here are 2 examples how to upload files to your server
Single file References issue #774 and detail example code.
func main() { router := gin.Default() // Set a lower memory limit for multipart forms (default is 32 MiB) // router.MaxMultipartMemory = 8 &amp;lt;&amp;lt; 20 // 8 MiB router.POST(&amp;quot;/upload&amp;quot;, func(c *gin.Context) { // single file file, _ := c.FormFile(&amp;quot;file&amp;quot;) log.Println(file.Filename) // Upload the file to specific dst. // c.SaveUploadedFile(file, dst) c.</description>
    </item>
    
    <item>
      <title>Middleware</title>
      <link>https://gin-gonic.com/documentation/router/middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/middleware/</guid>
      <description>In the middleware section you will find more about them. Here we show how you how to create a router with or without middleware
Blank Gin without middleware by default Use
r := gin.New()  instead of
// Default With the Logger and Recovery middleware already attached r := gin.Default()  Using middleware func main() { // Creates a router without any middleware by default r := gin.New() // Global middleware // Logger middleware will write the logs to gin.</description>
    </item>
    
    <item>
      <title>Logs to file</title>
      <link>https://gin-gonic.com/documentation/router/log_file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/log_file/</guid>
      <description>By changing the gin.DefaultWriter field you can redirect the logs somewhere different from the terminal. Here is an example on how to write the logs to a file.
func main() { // Disable Console Color, you don&#39;t need console color when writing the logs to file. gin.DisableConsoleColor() // Logging to a file. f, _ := os.Create(&amp;quot;gin.log&amp;quot;) gin.DefaultWriter = io.MultiWriter(f) // Use the following code if you need to write the logs to file and console at the same time.</description>
    </item>
    
    <item>
      <title>Redirects</title>
      <link>https://gin-gonic.com/documentation/router/redirect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gin-gonic.com/documentation/router/redirect/</guid>
      <description>Issuing a HTTP redirect is easy. Both internal and external locations are supported.
r.GET(&amp;quot;/test&amp;quot;, func(c *gin.Context) { c.Redirect(http.StatusMovedPermanently, &amp;quot;http://www.google.com/&amp;quot;) })  Issuing a Router redirect, use HandleContext like below.
r.GET(&amp;quot;/test&amp;quot;, func(c *gin.Context) { c.Request.URL.Path = &amp;quot;/test2&amp;quot; r.HandleContext(c) }) r.GET(&amp;quot;/test2&amp;quot;, func(c *gin.Context) { c.JSON(200, gin.H{&amp;quot;hello&amp;quot;: &amp;quot;world&amp;quot;}) })  </description>
    </item>
    
  </channel>
</rss>